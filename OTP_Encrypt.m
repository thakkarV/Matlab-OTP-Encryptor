function OTP_Encrypt()
% This is a function that encrpyts a message by a randomly generated 
% One Time Pad
% This pad is pseudorandom and therefore does not a completely
% uncrackable cypher make. Buyer beware! Knowledge of OTPs and Caesar shifts
% is by no means requried to use the software but having some is
% recommended. Decoding does require the knowledge of how Caesar shifts
% work for obvious reasons.
% 
% Vijay H. Thakkar -- BU ENG 2019
% Summer 2016
% Version: 1.0
% Dedicated to the snake squad and especially Sese, you guys are da best!

%% Variable Definitions

% Response
%       String variable that stores inputs to the GetYN function.
% 
% Elements
%       Intiger variable that stores the number of words in the message.
%       
% EmptyFirst, EmptyLast
%       Logical variables that sstore true/false based on the first and 
%       last word being an empty string. True if the string is empty. 
%       Flase if not empty.
%
% UnDel_M
%       Raw input string message from the user.
% 
% Del_M 
%       Delimited message broken up into a cell array with each cell
%       contianing one word of the message. 
%
% Plain_M
%       Del_M that has been processed into the final plain text cell
%       array after the removal of delimiteres and all numbers.
%
% Cyph_case 
%       Stores the case of the alphabet the user wants the cypher text in.
%
% Cyph_M
%       Cypher text cell array. Same size as Plain_M but with letters
%       shifted according to the Key.
%
% VecPlain_M, VecCyph_M
%       Row vector versions of the two cell arrays with all letters stored
%       as a single string. These vars are for my (devs) convenience, and also porvide
%       an easy way to index the writes to the output file.
%
% Key
%       Row vector that stores the pseudorandom Caesar shift key for
%       encryption. Same length as VecPlain_M and VecCyph_M.
%
% PlainName, CyphName, KeyName
%       Names of the three output files as obtained from uiputfile DB.
%
% PlainPad, CyphPad
%       Number of padding chars '~' requried for the output.
%
% PlainPath, CyphPath, KeyPath
%      File paths of the three output files as obtianed from uiputfile DB.
%
% PlainID, CyphID and KeyID
%       file function ID numbers of the output .txt files as obtained from
%       fpoen function.

%% Welcome
clc
clear

fprintf('Ayyyy! So... you wanna OTP encrypt your messages eh! \n')
fprintf('Cheeky Cheeky!! \n \n')

pause(1)

fprintf('Anyway, on a serious note, I will first explain how to use this program \n')
fprintf('and what you need to know about it. \n \n')

pause(1)

fprintf('This program required minimal effort on your part You can thank me for that. \n')
fprintf('You only need to type your message and the cypher Key will be generated automatically. \n')
fprintf('I will not explain the two most important things about this program \n')
fprintf('and will have you agree to each of them. \n')

fprintf('Kapiche? Y/N --> ')
Response = GetYN();

if Response == 'N' || Response == 'n'
    error('Okay then! Don''t put up with my shit. Fine! GTFO! No one likes you anyway')
end

%% Disclaim
clc

pause(1)

fprintf('First thing. This is NOT a proper OTP cypher. \n')
fprintf('The numeric Keys are pseudorandom. Truely random OTPs are uncrackable. \n')
fprintf('Since the autogenerated Keys are not truely random, they can be cracked given enough time. \n')
fprintf('Though this may take a VERY long time, you have been warned! \n')
fprintf('Support for user generated OTP text file input is a future feature.\n')
fprintf('Contact the dev for questions about avaliablity of newer versions. \n \n')

pause(1)

fprintf('Do you understand this disclaimer and wish to continue? Y/N --> ')
Response = GetYN();

if Response == 'N' || Response == 'n'
    error('Wow. Your messgae must be very important. Encrypt it yourself then bitch!')
end

%% Instruct
clc

pause(1)

fprintf('Second on is the most important instruction for using this program. \n')
fprintf('It is critical that you read this part carefully, or your encrypted message \n')
fprintf('might never be decypherable and will be lost in the ether. \n')
fprintf('This prgram will output three text (.txt) files. \n \n')

pause(1)

fprintf('First is the plain text. This is simply the message that you typed in yourself. \n')
fprintf('This is so that you have a copy of your own message for yourself. \n')
fprintf('Only letter and punctuations are allowed. No numbers please! \n')
fprintf('Althogh you can input numbers and punctuations, they will simply be thrown away. \n \n')

pause(1)

fprintf('Second is the cypher text. This is the encypted message. \n')
fprintf('You want to send this text to the receiving individual \n')
fprintf('EXACTLY AS IT IS SHOWN IN THE FILE. \n')
fprintf('This text will not have any punctuations whatsoever. \n \n')

pause(1)

fprintf('Third and the most important file is the One Time Pad. \n')
fprintf('This is the autogenerated Key that will be used to encrypt your message. \n')
fprintf('You want to send this file to the person by some other means than your cypher text. \n')
fprintf('If you do not send this file, then the receiving individual will \n')
fprintf('NEVER be able to decrpyt the message. \n \n')

pause(1)

fprintf('Do you understand these instructions and wish to continue? Y/N --> ')
Response = GetYN();

if Response == 'N' || Response == 'n'
    error('k. u suk anyway m8. suk it. bye')
end

%% Get Message
clc

pause(1)

fprintf('Now I will ask for your message that you need encrypted. \n')
fprintf('Please enter the entire message without any numbers. Any numbers will be thrown out. \n')
fprintf('Upper and lower case letters and punctuations marks are okay. \n')
fprintf('At any point while typing the message, do not press enter to go to next line. \n')
fprintf('Type the entire message in the same line below. \n')

pause(1)

% Inputs statement
UnDel_M = input('','s');

%Confirm correct input
pause(1)

fprintf('The message you have entered will be displayed below. Please confirm for typos. \n')
fprintf('%s \n',UnDel_M)
fprintf('Is this correct? Y/N --> ')
Response = GetYN();

while Response == 'N' || Response == 'n'
    clc
    fprintf('Lol if only you had taken as much care typing that message as i did writing this code \n')
    fprintf('Enter the correct message below you skrub. \n')
    
    UnDel_M = input('','s');
    %Confirm correct input
    pause(1)

    fprintf('The message you have entered will be displayed below. \n')
    fprintf('Please confirm for tyos again you piece of shit. \n')
    fprintf('%s \n',UnDel_M)
    fprintf('Is this correct? Y/N --> ')
    Response = GetYN();
end

% Ask user if they want the cypher text in lower or upper case
clc
fprintf('Do you want the cypher text to be upper case or lower case? \n')
fprintf('Answer U or L for upper or lower here --> ')

Response = input('','s');
while ((Response ~= 'u') && (Response ~= 'U') && (Response ~= 'l') && (Response ~= 'L'))
        Response = input('U/L Responses only. Re-enter here --> ','s');
end
 
% Store final response for later
Cyph_case = Response;

pause(1)

clc
fprintf('Okay. I will now make the cypher text. Please wait. \n')

%% Messsgae Delimitation and Proecessing

% Delimitation step
Del_M = strsplit(UnDel_M,{' ' , ',' , '.' , '?' , '!' , ';' , ':' , '''' , '"'});

% Number of words is at least one and possibly two less than the words in
% input since the last cell due to empy strings at the end and at the start
% if first char of the input string is one of delimiters.
% Its just how matlab works so gotta work aroud it.
% First check which ones are empty

EmptyFirst = isempty(Del_M{1});
EmptyLast = isempty(Del_M{numel(Del_M)});

% Once checked, delete the empty strings off of the cell array
if EmptyFirst && EmptyLast
    Del_M = Del_M(2:numel(Del_M)-1);
elseif ~EmptyFirst && EmptyLast
    Del_M = Del_M(1:numel(Del_M)-1);
elseif EmptyFirst && ~EmptyLast
    Del_M = Del_M(2:numel(Del_M));
end

% Count number of words in message now
Elements = numel(Del_M);

% Now for all the words in the message...
for i = 1:Elements 
    % First find all chars that are not numbers
    index1 = isstrprop(Del_M{i}, 'alpha');
    
    % Then remove the numbers and replace with empty strings
    Del_M{i}(index1==0) = [];
end

% Now again we have to check for empty cells in the middle of the message
Del_M = Del_M(~cellfun('isempty',Del_M));

% Number of cells could have changed as a reason. Count again.
Elements = numel(Del_M);

% Shift all letters to desired case
if Cyph_case == 'u' || Cyph_case == 'U'
    Plain_M = upper(Del_M);
elseif Cyph_case == 'l' || Cyph_case == 'L'  
    Plain_M = lower(Del_M);
end

%% Make the cypher Key and encrypt message

% Count total number of letters
NumChars = sum(cellfun('length',Plain_M));

% Generate Key
Key = randi([0,25],1,NumChars);

% Initialzise Cyph_M
Cyph_M = cell(1,Elements);

% Generate encrypted message
% If the message is supposed to be in upper case then...
if Cyph_case == 'u' || Cyph_case == 'U'

    % For all words in the plain text
    for i = 1:Elements
    
    % First find the number of letters in the plain text before the ith
    % word and store it in. KeyIndex. 
    KeyIndex = sum( cellfun('length',Plain_M(1:i-1)) );
    
    % Now for the jth letter in the ith word, Caesar shift it by a value of
    % KeyIndex + j
        for j = 1:length( Plain_M{i} )   
            plaincharnum = double( Plain_M{i}(j) );
            cyphcharnum = mod( plaincharnum - 65 + Key(KeyIndex+j) ,26);
            Cyph_M{i}(j) = char( cyphcharnum + 65);
        end   
    end

% Else if the message is supposed to be in lower case then...
elseif Cyph_case == 'l' || Cyph_case == 'L'

    % For all the words in the plain text...
    for i = 1:Elements
    
    % First find the number of letters in the plain text before the ith
    % word and store it in. KeyIndex.
    KeyIndex = sum( cellfun('length',Plain_M(1:i-1)) );
    
    % Now for the jth letter in the ith word, Caesar shift it by a value of
    % KeyIndex + j
        for j = 1:length(Plain_M{i})   
            plaincharnum = double(Plain_M{i}(j));
            cyphcharnum = mod( plaincharnum - 97 + Key(KeyIndex+j) ,26);
            Cyph_M{i}(j) = char( cyphcharnum + 97 );
        end      
    end
end

%% Prep texts for output

%First convert cypher text cell array to a string vector

VecPlain_M = cell2mat(Plain_M);
VecCyph_M = cell2mat(Cyph_M);

% Since output lines must have 20 chars each, if length is not a multiple
% of 20 pad the last few chars with ~

lenVecPlain_M = length(VecPlain_M);
lenCyphPlain_M = length(VecCyph_M);

if mod(lenVecPlain_M,20) ~= 0 
   PlainPad = 20-mod(lenVecPlain_M,20);
   CypherPad = 20-mod(lenCyphPlain_M,20);
   VecPlain_M(lenVecPlain_M+1:lenVecPlain_M+PlainPad) = '~';
   VecCyph_M(lenCyphPlain_M+1:lenCyphPlain_M+CypherPad) = '~';
end

%% Ask for output file names and make them
clc
pause(1)

fprintf('Okay, the cypher is  ready. Last step now. \n')
fprintf('I will now ask you where you want each idvidual file to be saved and with what name. \n \n')

fprintf('PLAIN TEXT file first. \n')
 
pause(1.5) 

[PlainName, PlainPath, ~] = uiputfile('*.txt', 'Please select the location and the name of PLAIN text file here');

pause(0.5)

fprintf('CYPHER TEXT file second. \n')

pause(1.5)

[CyphName, CyphPath, ~] = uiputfile('*.txt', 'Please select the location and the name of CYPHER text file here');

pause(0.5)

fprintf('DECRYPTION KEY file at the end. \n')

pause(1.5)

[KeyName, KeyPath, ~] = uiputfile('*.txt', 'Please select the location and the name of CYPHER text file here');

% Open all three files
PlainID = fopen([PlainPath '\\' PlainName], 'wt');
CyphID = fopen([CyphPath '\\' CyphName], 'wt');
KeyID = fopen([KeyPath '\\' KeyName], 'wt');

% Write to al three files
fprintf(PlainID, '%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c', UnDel_M);
fprintf(CyphID, '%c%c%c%c%c     %c%c%c%c%c     %c%c%c%c%c     %c%c%c%c%c\n', VecCyph_M);
fprintf(KeyID, '%2d %2d %2d %2d %2d     %2d %2d %2d %2d %2d     %2d %2d %2d %2d %2d     %2d %2d %2d %2d %2d\n', Key);

% Close all files
fclose('all');

pause(0.5)

% Greet and leave
fprintf('Okay! You are good to go. Happy messaging people. \n')
fprintf('All your files should be in the folders you selected under the names you inputed. \n')
fprintf('Pleasure serving you. NAT! ha. fuk off now. Go on. BYE.. Good riddence. Jeez... \n')

end

%% Auxiliary Functions

function str = GetYN()
    str = input('','s');
    if isempty(str)
        str = 'y';
    else
        while ((str ~= 'y') && (str ~= 'Y') && (str ~= 'n') && (str ~= 'N'))
           str = input('Y/N Responses only. Re-enter here --> ','s');
        end
    end
    str = str(1);
end